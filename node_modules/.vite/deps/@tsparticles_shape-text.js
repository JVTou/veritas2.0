import {
  executeOnSingleOrMultiple,
  isInArray,
  itemFromSingleOrMultiple,
  loadFont
} from "./chunk-P7NNVAMZ.js";
import "./chunk-CEQRFMJQ.js";

// node_modules/@tsparticles/shape-text/browser/Utils.js
var double = 2;
var half = 0.5;
function drawText(data) {
  const { context, particle, radius, opacity } = data, character = particle.shapeData;
  if (!character) {
    return;
  }
  const textData = character.value;
  if (textData === void 0) {
    return;
  }
  if (particle.text === void 0) {
    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);
  }
  const text = particle.text, style = character.style ?? "", weight = character.weight ?? "400", size = Math.round(radius) * double, font = character.font ?? "Verdana", fill = particle.shapeFill;
  const lines = text == null ? void 0 : text.split("\n");
  if (!lines) {
    return;
  }
  context.font = `${style} ${weight} ${size}px "${font}"`;
  context.globalAlpha = opacity;
  for (let i = 0; i < lines.length; i++) {
    drawLine(context, lines[i], radius, opacity, i, fill);
  }
  context.globalAlpha = 1;
}
function drawLine(context, line, radius, opacity, index, fill) {
  const offsetX = line.length * radius * half, pos = {
    x: -offsetX,
    y: radius * half
  }, diameter = radius * double;
  if (fill) {
    context.fillText(line, pos.x, pos.y + diameter * index);
  } else {
    context.strokeText(line, pos.x, pos.y + diameter * index);
  }
}

// node_modules/@tsparticles/shape-text/browser/TextDrawer.js
var TextDrawer = class {
  constructor() {
    this.validTypes = ["text", "character", "char", "multiline-text"];
  }
  draw(data) {
    drawText(data);
  }
  async init(container) {
    const options = container.actualOptions, { validTypes } = this;
    if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {
      const shapeOptions = validTypes.map((t) => options.particles.shape.options[t]).find((t) => !!t), promises = [];
      executeOnSingleOrMultiple(shapeOptions, (shape) => {
        promises.push(loadFont(shape.font, shape.weight));
      });
      await Promise.all(promises);
    }
  }
  particleInit(container, particle) {
    if (!particle.shape || !this.validTypes.includes(particle.shape)) {
      return;
    }
    const character = particle.shapeData;
    if (character === void 0) {
      return;
    }
    const textData = character.value;
    if (textData === void 0) {
      return;
    }
    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);
  }
};

// node_modules/@tsparticles/shape-text/browser/index.js
async function loadTextShape(engine, refresh = true) {
  engine.checkVersion("3.8.1");
  await engine.addShape(new TextDrawer(), refresh);
}
export {
  loadTextShape
};
//# sourceMappingURL=@tsparticles_shape-text.js.map
