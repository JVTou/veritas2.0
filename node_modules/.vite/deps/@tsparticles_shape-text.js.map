{
  "version": 3,
  "sources": ["../../@tsparticles/shape-text/browser/Utils.js", "../../@tsparticles/shape-text/browser/TextDrawer.js", "../../@tsparticles/shape-text/browser/index.js"],
  "sourcesContent": ["import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n", "import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport class TextDrawer {\n    constructor() {\n        this.validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\n    }\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions, { validTypes } = this;\n        if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map(t => options.particles.shape.options[t])\n                .find(t => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, shape => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !this.validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n", "import { TextDrawer } from \"./TextDrawer.js\";\nexport async function loadTextShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new TextDrawer(), refresh);\n}\n"],
  "mappings": ";;;;;;;;;AACA,IAAM,SAAS;AAAf,IAAkB,OAAO;AAClB,SAAS,SAAS,MAAM;AAC3B,QAAM,EAAE,SAAS,UAAU,QAAQ,QAAQ,IAAI,MAAM,YAAY,SAAS;AAC1E,MAAI,CAAC,WAAW;AACZ;AAAA,EACJ;AACA,QAAM,WAAW,UAAU;AAC3B,MAAI,aAAa,QAAW;AACxB;AAAA,EACJ;AACA,MAAI,SAAS,SAAS,QAAW;AAC7B,aAAS,OAAO,yBAAyB,UAAU,SAAS,eAAe;AAAA,EAC/E;AACA,QAAM,OAAO,SAAS,MAAM,QAAQ,UAAU,SAAS,IAAI,SAAS,UAAU,UAAU,OAAO,OAAO,KAAK,MAAM,MAAM,IAAI,QAAQ,OAAO,UAAU,QAAQ,WAAW,OAAO,SAAS;AACvL,QAAM,QAAQ,6BAAM,MAAM;AAC1B,MAAI,CAAC,OAAO;AACR;AAAA,EACJ;AACA,UAAQ,OAAO,GAAG,KAAK,IAAI,MAAM,IAAI,IAAI,OAAO,IAAI;AACpD,UAAQ,cAAc;AACtB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,aAAS,SAAS,MAAM,CAAC,GAAG,QAAQ,SAAS,GAAG,IAAI;AAAA,EACxD;AACA,UAAQ,cAAc;AAC1B;AACA,SAAS,SAAS,SAAS,MAAM,QAAQ,SAAS,OAAO,MAAM;AAC3D,QAAM,UAAU,KAAK,SAAS,SAAS,MAAM,MAAM;AAAA,IAC/C,GAAG,CAAC;AAAA,IACJ,GAAG,SAAS;AAAA,EAChB,GAAG,WAAW,SAAS;AACvB,MAAI,MAAM;AACN,YAAQ,SAAS,MAAM,IAAI,GAAG,IAAI,IAAI,WAAW,KAAK;AAAA,EAC1D,OACK;AACD,YAAQ,WAAW,MAAM,IAAI,GAAG,IAAI,IAAI,WAAW,KAAK;AAAA,EAC5D;AACJ;;;ACnCO,IAAM,aAAN,MAAiB;AAAA,EACpB,cAAc;AACV,SAAK,aAAa,CAAC,QAAQ,aAAa,QAAQ,gBAAgB;AAAA,EACpE;AAAA,EACA,KAAK,MAAM;AACP,aAAS,IAAI;AAAA,EACjB;AAAA,EACA,MAAM,KAAK,WAAW;AAClB,UAAM,UAAU,UAAU,eAAe,EAAE,WAAW,IAAI;AAC1D,QAAI,WAAW,KAAK,OAAK,UAAU,GAAG,QAAQ,UAAU,MAAM,IAAI,CAAC,GAAG;AAClE,YAAM,eAAe,WAChB,IAAI,OAAK,QAAQ,UAAU,MAAM,QAAQ,CAAC,CAAC,EAC3C,KAAK,OAAK,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;AACjC,gCAA0B,cAAc,WAAS;AAC7C,iBAAS,KAAK,SAAS,MAAM,MAAM,MAAM,MAAM,CAAC;AAAA,MACpD,CAAC;AACD,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,aAAa,WAAW,UAAU;AAC9B,QAAI,CAAC,SAAS,SAAS,CAAC,KAAK,WAAW,SAAS,SAAS,KAAK,GAAG;AAC9D;AAAA,IACJ;AACA,UAAM,YAAY,SAAS;AAC3B,QAAI,cAAc,QAAW;AACzB;AAAA,IACJ;AACA,UAAM,WAAW,UAAU;AAC3B,QAAI,aAAa,QAAW;AACxB;AAAA,IACJ;AACA,aAAS,OAAO,yBAAyB,UAAU,SAAS,eAAe;AAAA,EAC/E;AACJ;;;AClCA,eAAsB,cAAc,QAAQ,UAAU,MAAM;AACxD,SAAO,aAAa,OAAO;AAC3B,QAAM,OAAO,SAAS,IAAI,WAAW,GAAG,OAAO;AACnD;",
  "names": []
}
